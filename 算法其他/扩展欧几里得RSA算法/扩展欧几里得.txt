如何理解？
欧几里得算法没扩展之前，计算的两个数的最大公约数，比如计算144和24的最大公约数，计算的过程如下：
最开始：144 24
第一次：24 144 % 24 即 24 0
发现直接整数了，说明24就是144的公约数，所以计算结果就是：24
如果用a，b来表示，变为一般形式的话：
给定两个数（a, b），现在想计算两者的最大公约数，那么可以那b来模a，如果结果为0，那说明b就是两者的最大公约数，如果有余数，比如：
最开始：14 6
第一次：6 14 % 6 即6 2
第二次：2 6 % 2 即2 0
反过来看：2是2、6的最大公约数，而6不是6、14的最大公约数，但是K * 6 + 2能够得到14，且6能被2整除，说明2是14的公约数。
扩展之后
如果将欧几里得算法进行扩展，就是这样，比如：
144 24，我们知道两者的最大公约数是24，那么144x + 24y = 24，这个x、y分别是什么呢？显然是x = 0，y = 1；但如果是14x + 6y = 2呢？通过上面求最大公约数的过程，我们能够知道，最后一步的2x1 + 6y1 = 2是很容易的得到结果的，但是怎么样从这个结果推回来，得到一开始的y呢？——这个就是扩展欧几里得算法。
这样来理解：
14x + 6y
6x2 + (14 % 6)y2
2x1 + (6 % 2)y1
一步一步往前推，14 % 6 == 2，说明y2 = x1，那么6x2 == (6 % 2)y1 == (6 - 6 / 2 * 2)y1（这里的是整除，用7 % 4来看，会更清晰，即等于7 - 7 / 4 * 4）
通过这样的递推，即从后往前推（或者用递归的思想，一直归到最底，然后再计算回来）就能实现这一算法了。









扩展欧几里得算法（求逆元）总结 

1、在RSA算法生成私钥的过程中涉及到了扩展欧几里得算法（简称exgcd），用来求解模的逆元。
 
2、首先引入逆元的概念：
逆元是模运算中的一个概念，我们通常说 A 是 B 模 C 的逆元，实际上是指 A * B = 1 mod C，也就是说 A 与 B 的乘积模 C 的余数为 1。可表示为 A = B^(-1) mod C。
打个比方，7 模 11 的逆元，即：7^(-1) mod 11 = 8，这是因为 7 × 8 = 5 × 11 + 1，所以说 7 模 11 的逆元是 8。
 
3、在RSA算法中求私钥中的整数d时，需要使得 (e * d ) % m = 1，该方程等价于 e * d = 1 + y * m （y为整数），也等价于 e * d - y * m = 1。
因此求解d的过程就是求解该二元一次方程组（e和m已知，求解d），即求e模m的逆元。
 
4、在使用扩展欧几里德算法求解e模m的逆元前，首先通过证明扩展欧几里得算法来对该算法有一个简单的理解：
引理：存在 x , y 使得 gcd(a,b)=ax+by
证明：
       　当 b=0 时，gcd(a,b)=a，此时 x=1 , y=0
       　当 b!=0 时，
　　   设 ax1+by1=gcd(a,b)=gcd(b,a%b)=bx2+(a%b)y2
       　又因 a%b=a-a/b*b
       　则 ax1+by1=bx2+(a-a/b*b)y2
　　　　ax1+by1=bx2+ay2-a/b*by2
　　　　ax1+by1=ay2+bx2-b*a/b*y2
　　　　ax1+by1=ay2+b(x2-a/b*y2)
　　　解得 x1=y2 , y1=x2-a/b*y2
　　　因为当 b=0 时存在 x , y 为最后一组解
　　　而每一组的解可根据后一组得到
　　　所以第一组的解 x , y 必然存在
　　　得证
根据上面的证明，在实现的时候采用递归做法
先递归进入下一层，等到到达最后一层即 b=0 时就返回x=1 , y=0
再根据 x1=y2 , y1=x2-a/b*y2 ( x2 与 y2 为下一层的 x 与 y ) 得到当层的解
不断算出当层的解并返回，最终返回至第一层，得到原解
 
5、使用扩展欧几里德算法的过程如下：
求exgcd(e, m)—>利用欧几里得算法不断递归直到x=1,y=0—>反向递归求出第一层的x和y，x即为e模m的逆元。